# Default values for nats-skeleton-spa.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
devDebug: false

replicaCount: 1

image:
  repository: ghcr.io/jr200/nats-skeleton-spa
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: ''

imagePullSecrets: []
nameOverride: ''
fullnameOverride: ''

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''

config:
  authIdp:
    uri: ''
    clientId: ''
    scope: openid email offline_access
    redirectUri: ''
    postLogoutRedirectUri: ''

  nats:
    ssl: true
    uri: nats.nats.svc:4222

  nginx:
    ssl: true
    errorLogLevel: info

vault:
  enabled: false
  url: https://vault.vault.svc

  authMount: auth/kubernetes
  nobodyReaderRole: my-nats-skeleton-spa-role
  nobodyAccount: nats/creds/operator/my-op/account/my-acct/user/nobody

## Optionally specify extra environment variables to add to container
extraEnv: {}

podAnnotations: {}
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: haproxy
  annotations: []

  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}


# ----------------------------------------------------------------------------
# vault-actions subchart used to create a policy that grants the Vault-Agent 
# Sidecar Injector permissions to the paths listed in the .Values.vault section.
# note: this chart automatically infers and constructs the required policy.
# see: https://github.com/jr200/vault-actions
# ----------------------------------------------------------------------------
vault-actions:
  # Enable or disable Vault actions
  enabled: false
  # Enable or disable debug mode for Vault actions
  devDebug: false

  hookConfiguration:
    # The hook phase for Vault actions
    hook: pre-install
    # The weight for hook ordering
    hookWeight: -5
    # The delete policy for the hook
    hookDeletePolicy: before-hook-creation,hook-succeeded

  # The bootstrap token for Vault actions
  # this can either be a regular token with a superset of the required policies
  # or a minimal policy generated by the vault-actions component.
  #
  # To obtain instructions to build the minimal token, run this chart with a null
  # or invalid token, and observe the output of the failed vault-actions pod.
  bootstrapToken: ~

  # The name of the secret for vault-actions bootstrap
  secretName: va-bootstrap-secret

  # the name of the created policy, used by the vault-agent sidecar injector
  policyName: my-nats-skeleton-spa-policy

  config:
    bootstrap:
      # Clean up the bootstrap policy after installation
      cleanup_after_install: true
      params:
        # Display name for the bootstrap
        display-name: nats-skeleton-spa-bootstrap
        # Maximum TTL for the bootstrap token
        explicit-max-ttl: 5m
        # Whether the bootstrap token is renewable
        renewable: false
        # The TTL for the one-time use wrapping tokens
        wrap-ttl: 60s
        # The format for displaying secrets
        format: table
        # The field to use for wrapping tokens
        field: wrapping_token

    # Additional actions to perform during vault-actions bootstrap
    # (probably not needed)
    additionalActions: []

