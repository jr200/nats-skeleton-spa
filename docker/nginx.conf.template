user  nginx;
worker_processes  auto;
pid        /var/run/nginx.pid;
error_log  /dev/stderr debug;

events {
    worker_connections  1024;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /dev/stdout main;
    error_log /dev/stderr ${NGINX_ERROR_LOG_LEVEL};

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;

    keepalive_timeout  65;
    types_hash_max_size 2048;
    # server_tokens off;

    gzip on;
    gzip_disable "msie6";
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/atom+xml application/xml+rss text/javascript;

    # Avoid "queries of death"
    proxy_next_upstream error;

    server {            
        listen       ${NGINX_LISTEN_PORT} ${NGINX_LISTEN_FLAGS};
        server_name localhost;
        
        server_tokens off;

        large_client_header_buffers 4 32k;

        ssl_protocols              TLSv1.2;

        ssl_ciphers                ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
        ssl_prefer_server_ciphers  on;

        ssl_session_cache    shared:SSL:10m; # a 1mb cache can hold about 4000 sessions, so we can hold 40000 sessions
        ssl_session_timeout  24h;

        ssl_certificate      /etc/nginx/ssl/localhost.crt;
        ssl_certificate_key  /etc/nginx/ssl/localhost.key;

        # Use a higher keepalive timeout to reduce the need for repeated handshakes
        keepalive_timeout 300; # up from 75 secs default

        # remember the certificate for a year and automatically connect to HTTPS
        add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains';


        location / {
            root   /usr/share/nginx/html;
            index  index.html;
            try_files $uri /index.html;

            add_header X-Frame-Options SAMEORIGIN;
            add_header X-Content-Type-Options nosniff;
            # add_header Cache-Control "max-age=0, no-cache, must-revalidate";
            # add_header Pragma "no-cache";
        }

        location /ws {
            proxy_pass ${NGINX_WEBSOCKET_BACKEND_URI};

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Increase proxy timeout values to handle slow connections
            proxy_read_timeout 3600;
            proxy_send_timeout 3600;
            proxy_connect_timeout 3600;
            proxy_buffering off;  # For WebSocket connections, disable proxy buffering
        }

        location /healthz {
            return 200 'no content';
        }
                        
        #error_page  404              /404.html;                                                                                                                                                                  
                        
        # redirect server error pages to the static page /50x.html                                                                                                                                                
        #               
        error_page   500 502 503 504  /50x.html;                                                                                                                                                                  
        location = /50x.html {                                                                                                                                                                                    
            root   /usr/share/nginx/html;                                                                                                                                                                         
        }               
                        
        # deny access to .htaccess files, if Apache's document root                                                                                                                                               
        # concurs with nginx's one                                                                                                                                                                                
        #               
        location ~ /\.ht {                                                                                                                                                                                       
            deny  all;
        }              
    }    

}




